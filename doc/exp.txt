Setting up the Olimex STM32-E407 board
--------------------------------------

- install feet and headers at will (the feet don't enter easily. Twisting
  them helps. The material seems strong enough that twisting doesn't
  shear off the nipples. Once inserted, let the rubber relax for a moment,
  then push it in some more.)

- receive power from USB-OTG1:
  move the PWR_SEL jumper (close to the DC connectors) from position
  1-2 (near the battery connector) to position 7-8 (in the large
  capacitors)

- to boot into DFU mode, move the jumper on B0_0 (near the UEXT connector)
  to position B0_1

- plug mini-USB into USB-OTG1, next to the Ethernet connector. The
  board should now enumerate as 0483:df11.


The FreeRTOS demo (basic)
-------------------------

(Up to frtos-wpan/freertos commit cbb4e798cf604a8fd1284755dfc825b5f4125add)

The demo runs on the Olimex STM32-E407. It

- blinks the LED, and

- prints "hello <number>" on UART6.TX at 19200 bps, where <number> is
  a sequence number. UART6 is available on the UEXT connector.

  A simple serial console utility can be found here:
  http://projects.qi-hardware.com/index.php/p/wernermisc/source/tree/master/neocon

% cd FreeRTOS/Demo/E407
% make
<bridge B0_1 and reset>
% make dfu
<move jumper back to B0_0 and reset again>

Note that the first "make" will download the ST "demonstration builder
platform" and therefore needs Internet access.


The Contiki demo (basic)
------------------------

(Up to frtos-wpan/contiki-outoftree commit
b0471c3c42767b3943610585a1ca0e7f1e1087ef)

The demo runs on the Olimex STM32-E407. It

- blinks the LED at some 0.1 Hz, and

- displays diagnostics on UART6.TX at 115200 bps

% cd contiki-outoftree
% make -C libopencm3
% make TARGET=stm32-e407 -j5
<bridge B0_1 and reset>
% make TARGET=stm32-e407 dfu
<move jumper back to B0_0 and reset again>


The Contiki demo (atben)
------------------------

(frtos-wpan/contiki-outoftree commit d82977b872f07bc4dde004275309b89e4a6810d4
and later)

The demo runs on the Olimex STM32-E407. It

- initializes an atben board in the uSD connector

- starts a shell on UART6 at 115200 bps

The build instructions are the same as for the previous demo.

To access the console, run

# neocon -L /dev/ttyUSB0

Test transmission:

- run an IEEE 802.15.4 receiver listening on channel 11

- on the Contiki console, run
  rime-ping 3.3

- the receiver should now show a messgage looking roughly like this:

  41 c8 48 cd ab ff ff 00 00 00 00 00 00 00 00 1b
  00 00 00 02 00 00 00 00 00 03 03 02 00

Test reception:

- on the Contiki console, run
  sniff -a

- run an IEEE 802.15.4 transmitter sending this on channel 11:

  41 c8 48 ff ff ff ff ff 00 00 00 00 00 00 00 1b
  00 00 00 02 00 00 00 00 00 03 03 02 00

- Contiki should now show something like

  rf230_read: 29 bytes lqi 255

When using atusb for the peer, the commands would be:

Detach kernel driver (if present):

# cd /sys/bus/usb/drivers/atusb
# echo 3-1:1.0 >unbind

The string to write to "unbind" depends on the topology of the USB
system.

Receive:

# ./atrf-txrx -c 11 -x

Send:

# ./atrf-txrx -c 11 -x \
  41c848ffffffffff000000000000001b00000002000000000003030200


The FreeRTOS-Contiki hybrid demo (basic)
----------------------------------------

Commits:

frtos-wpan/freertos fa36f54b9348c233b19eae226543e3c3331561c2
frtos-wpan/contiki-outoftree f4f139e1e6a366d16bb5711c222db27dcd248ae8

What it does:

- FreeRTOS prints an infinite series of "hello NUMBER" at 19200 bps
  on the serial console

- FreeRTOS also blinks the LED

- Contiki starts under FreeRTOS, brings up RIME, prints a hello
  message, and enters the shell (no serial input is accepted at this
  point, so the shell just sits there)

% cd freertos/FreeRTOS/Demo/E407
% make FreeRTOSConfig.h
% cd ../../../../
% cd contiki-outoftree/platform/freertos
% ./m -a
% cd ../../..
% cd freertos/FreeRTOS/Demo/E407
% make
< put board in DFU mode >
% make dfu
< reset board >
