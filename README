@@@ WIP. branch names will change.

@@@ WIP. the github setup is a bit awkward. may change in the future.

See README.md for a brief project overview.

License
-------

Unless stated otherwise, all code in this project is developed by 
Werner Almesberger for Actility S.A., and licensed under LGPLv2 by 
Actility S.A.


System setup
------------

Package names are for Ubuntu 13.04.

git-svn is used to track the FreeRTOS upstream (only needed if
maintaining the SVN-to-git tracking repository):

# apt-get install git-svn

The official ARM cross-compilation toolchain
https://launchpad.net/gcc-arm-embedded

# add-apt-repository ppa:terry.guo/gcc-arm-embedded
# apt-get update
# apt-get install gcc-arm-none-eabi

If no package can be found, then change "raring" to "precise" in
/etc/apt/sources.list.d/terry_guo-gcc-arm-embedded-raring.list

We use dfu-util to load new firmware into the evaluation boards:

# apt-get install dfu-util

Other tools we need (some may already be installed):

# apt-get install git make unzip wget


Setting up a FreeRTOS SVN-to-git repository
-------------------------------------------

Note: skip the "git clone ...freertos.git" step in the next section
if you do this.

@@@ verify this sequence

% mkdir freertos
% cd freertos
% git init
% git svn fetch
% git checkout -b master
% git merge --ff-only trunk
% git remote add origin git@github.com:frtos-wpan/freertos.git
#% git push -u origin master
% git config push.default matching
% git push --mirror


Setting up the repositories
---------------------------

% git clone git@github.com:frtos-wpan/frtos-wpan.git 
% git clone git@github.com:frtos-wpan/contiki.git
% git clone git@github.com:frtos-wpan/freertos.git

% cd frtos-wpan
% make

% cd ../contiki
% git remote add upstream https://github.com/contiki-os/contiki.git
% cd ..


Updating the repositories
-------------------------

frtos-wpan:

% cd frtos-wpan
% git pull
% cd ..

Contiki (frtos-wpan fork):

% cd contiki
% git pull
% cd ..

Contiki (upstream):

% cd contiki
% git fetch upstream
% git checkout master
% git merge upstream/master
% git checkout frtos
% git merge master
% cd ..

FreeRTOS (from git):

% cd freertos
% git pull

FreeRTOS (from SVN):

% cd freertos
% git svn fetch
% git merge --ff-only trunk
  (or simply   git merge trunk  depending on state of branch)
% cd ..


Transitory contiki-outoftree repository
---------------------------------------

prepare clone after initial fork:

% git clone git@github.com:frtos-wpan/contiki-outoftree.git
% cd contiki-outoftree
% git remote add upstream https://github.com/karlp/contiki-outoftree.git
% git rm contiki
% git rm libopencm3
% git submodule add git@github.com:frtos-wpan/contiki.git contiki
% git submodule add git@github.com:frtos-wpan/libopencm3.git libopencm3
% git commit -a -m "redirect submodules to project-local forks"
% git push
% cd ..

clone (from repository with above preparation):

% cd contiki-outoftree
% git clone git@github.com:frtos-wpan/contiki-outoftree.git
% git remote add upstream https://github.com/karlp/contiki-outoftree.git
% git submodule init
% git submodule update
% cd ..

update:

% cd contiki-outoftree
% git fetch upstream
% git submodule update
% git checkout master
% git merge upstream/master
% cd ..


Transitory contiki-cm3 repository
---------------------------------

add upstream for CM3 port:

% cd contiki
% git remote add karl git@github.com:karlp/contiki-locm3.git
% cd ..

update:

% cd contiki
% git fetch karl
% git merge karl/locm3
% cd ..


Transitory libopencm3 repository
--------------------------------

clone:

% git clone git@github.com:frtos-wpan/libopencm3.git
% cd libopencm3
% git remote add upstream git@github.com:libopencm3/libopencm3.git
% git remote add karl git@github.com:karlp/libopencm3.git
% cd ..

update:

% cd libopencm3
% git fetch karl
% git merge karl/master
% cd ..


Caching the data sheets
-----------------------

Install "dsv" from
http://projects.qi-hardware.com/index.php/p/eda-tools/source/tree/master/dsv
for example,

% git clone git@projects.qi-hardware.com:eda-tools.git
% cp eda-tools/dsv/dsv /usr/local/bin

Download and cache the data sheets:

% cd frtos-wpan
% make

After that, you can access data sheets releveant to the project by going
to any directory under frtos-wpan and invoking "dsv NAME" there. Just
"dsv" lists the available names. The most important ones:

  eval	documentation of the Olimex STM32-E407 data sheet
  f400	STM32F4xx reference manual
  m4	STM32F4xx data sheet
  m4p	Cortex M4 programming manual

@@@ some of the abbreviations are not very good and may change in the
future.


Setting up the Olimex STM32-E407 board
--------------------------------------

- install feet and headers at will (the feet don't enter easily. Twisting
  them helps. The material seems strong enough that twisting doesn't
  shear off the nipples. Once inserted, let the rubber relax for a moment,
  then push it in some more.)

- receive power from USB-OTG1:
  move the PWR_SEL jumper (close to the DC connectors) from position
  1-2 (near the battery connector) to position 7-8 (in the large
  capacitors)

- to boot into DFU mode, move the jumper on B0_0 (near the UEXT connector)
  to position B0_1

- plug mini-USB into USB-OTG1, next to the Ethernet connector. The
  board should now enumerate as 0483:df11.


The FreeRTOS demo
-----------------

The demo runs on the Olimex STM32-E407. It

- blinks the LED, and

- prints "hello <number>" on UART6.TX at 19200 bps, where <number> is
  a sequence number. UART6 is available on the UEXT connector.

  A simple serial console utility can be found here:
  http://projects.qi-hardware.com/index.php/p/wernermisc/source/tree/master/neocon

% cd FreeRTOS/Demo/E407
% make
<bridge B0_1 and reset>
% make dfu
<move jumper back to B0_0 and reset again>

Note that the first "make" will download the ST "demonstration builder
platform" and therefore needs Internet access.


The Contiki demo
----------------

The demo runs on the Olimex STM32-E407. It

- blinks the LED at some 0.1 Hz, and

- displays diagnostics on UART6.TX at 115200 bps

% cd contiki-outoftree
% make -C libopencm3
% make TARGET=stm32-e407 -j5
<bridge B0_1 and reset>
% make TARGET=stm32-e407 dfu
<move jumper back to B0_0 and reset again>
